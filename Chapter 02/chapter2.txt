#### CHAPTER 2 Terraform Basics and Configuration
### Terraform language
## 
# Let’s create an example using these building blocks to create an AWS EC2 instance
resource "aws_instance" "example" {
    ami = var.image_ami
    instance_type = "t2.micro"
}

### Declaring provider in Terraform code
terraform {
    required_providers {
        AWS = {
            source = "hashicorp/aws"
            version = "3.35.0"
        }
    }
}

### Configuring the provider
provider "aws" {
    region = <AWS REGION>
    access_key = <your AWS ACCESS KEY>
    secret_key = <Your AWS SECRET KEY>
}

### Terraform resources
## Declaring resource
resource "aws_instance" "example" {
    ami = "ami-0aef57767f5404a3c"
    instance_type = "t2.micro"
}


### Terraform variables
## Declaring Input Variable
variable "AWS_ACCESS_KEY" {
    description = "AWS Access Key"
}
variable "AWS_SECRET_KEY" {
    description = "AWS Secret Key"
}
variable "AWS_REGION" {
    default = "eu-west-1"
    description = "AWS Region"
}
variable "AMIS" {
    type = map(string)
    description = "Region specific AWS Machine Images (AMI) "
    default = {
        us-east-1 = "ami-0a798643589ffd450"
        us-west-2 = "ami-0bc75469433986212"
    }
}


## Validation
variable "AMIS" {
  type = string
  description = "AWS Machine Images (AMI) for different Regions"
  default = "ami-0aef57767f5404a3c"
  validation {
    condition     = length(var.AMIS) > 4 && substr(var.AMIS, 0, 4) == "ami-"
    error_message = "The image_id value must be a valid AMI id, starting with \"ami-\"."
  }
}

## Accessing input variables
# provider.tf
provider "aws" {
    region = var.AWS_REGION
    access_key = var.AWS_ACCESS_KEY
    secret_key = var.AWS_SECRET_KEY
}

resource "aws_instance" "example_client" {
    ami = var.AMIS[var.AWS_REGION]
    instance_type = "t2.micro"
    tags = {
        Name = "Terraform_test_ec2"
    }
}

### Terraform local values
## Declaring a local value
# 
locals {
    name = "test_local"
    owner = "DevOps Team"
}

## Accessing a local value:
# 
resource "aws_instance" "example" {
    ami = var.AMIS[var.AWS_REGION]
    instance_type = "t2.micro"
    tags = {
        Name = local.name
    }
}
locals {
    name = "test_local"
    owner = "DevOps Team"
}


### Terraform output
## declaring output values
# 
output "public_ip" {
    value = aws_instance.example_client.public_ip
}

### Terraform states - Desired and current states
## Remote storage for Terraform state
## Configuring Amazon S3 as remote store
# provider.tf
provider "aws" {
    region = "eu-west-1"
}

# s3_remotestore.tf
resource "aws_s3_bucket" "bucket" {
    bucket = "terraformstateremotestore"
    versioning { 
        enabled = true
    }
    lifecycle { 
        prevent_destroy = true
    }
}

# Bucket Policy
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": ["arn:aws:iam::<AWS Account ID>:user/<USERNAME>","arn:aws:iam::<AWS Account ID>:user/<USERNAME2>","arn:aws:iam::<AWS Account ID>:user/<USERNAME3>"]},
            "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::terraformstateremotestore"
        },
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": ["arn:aws:iam::<AWS Account ID>:user/<USERNAME>","arn:aws:iam::<AWS Account ID>:user/<USERNAME2>","arn:aws:iam::<AWS Account ID>:user/<USERNAME3>"]
            },
            "Action": [
                "s3:GetObject",
                "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::terraformstateremotestore/*"
        }
    ]
}


# terraform.tf
terraform {
    backend "s3" {
        bucket = "terraformstateremotestore"
        key = "terraform.tfstate"
        region = "eu-west-1"
        encrypt = true
    }
}


## Configuring DynamoDB with Amazon S3 for locking Terraform states
# dynamoDB.tf
resource "aws_dynamodb_table" "terraform_state_lock" {
    name           = "terraform-state-lock"
    read_capacity  = 5
    write_capacity = 5
    hash_key       = "LockID"
    attribute {
        name = "LockID"
        type = "S"
    }
    lifecycle { 
        prevent_destroy = true
    }
}


# add the following policy to the IAM users/group of your team in AWS:.
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem"
            ],
            "Resource": "arn:aws:dynamodb:eu-west-1:365913881382:table/terraform-state-lock"
        }
    ]
}


# terraform.tf
terraform {
    backend "s3" {
        bucket = "terraformstateremotestore"
        key = "terraform.tfstate"
        region = "eu-west-1"
        encrypt = true
        dynamodb_table = "terraform-state-lock"
  }
}

### Provisioning multiple resources
## Count
# main.tf
resource "aws_instance" "example" {
    count = 2
    ami           = "ami-0aef57767f5404a3c"
    instance_type = "t2.micro"
}

## Count.index
# main.tf
resource "aws_instance" "example" {
    count = 2
    ami           = "ami-0aef57767f5404a3c"
    instance_type = "t2.micro"
    tags = {
        Name = format("%s%s",local.name,"-${count.index}")
    }
}
locals {
    name = "example_instance"
}

## For_each
# vars.tf
variable "webservers" {
    type = map(map(string))
    description = "AWS EC2 webserver instance with names WebAPI-Server and WebApp-Server "
    default = {
        "webserver1" = {
            "name" = "WebAPI-Server"
        }
        "webserver2" = {
            "name" = "WebApp-Server"
        }
    }
}

# main.tf
resource "aws_instance" "webserver" {
    for_each = var.webservers
    ami           = "ami-0aef57767f5404a3c"
    instance_type = "t2.micro"
    tags = {
        Name = each.value["name"]
    }
}
