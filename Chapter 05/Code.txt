#### Chapter 5 Automating Infrastructure Deployments in Azure Using Terraform
### Authenticating to Azure
## 2.	Configuring the service principal in Terraform
#Setting Terraform properties in Terraform configuration

# variables.tf
variable "client_secret" {
    description = "Enter your CLient Secret. Please make sure you do not store the value of your client secret in the SCM repository"
}
variable "client_id" {
    description = "Your client Id."
    default = "<SERVICE-PRINCIPAL-CLIENT_ID>"
}
variable "subscription_id" {
    description = "Your subscription id."
    default = "<AZURE-SUBSCRIPTION_ID>"
}
variable "tenant_id" {
    description = "Your tenant id."
    default = "<AZURE-TENANT_ID>"
}

## 3.	Azure Provider configuration in Terraform
# main.tf
# Azure Provider source and version being used
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "=2.46.0"
    }
  }
}

# Configure the Microsoft Azure Provider
provider "azurerm" {
  features {}
  subscription_id = var.subscription_id
  client_id       = var.client_id
  client_secret   = var.client_secret
  tenant_id       = var.tenant_id
}

### Configuring Terraform state management
## 1.	Configuring a storage account
# create_azure_storage.sh

#!/bin/bash
# create_azure_storage.sh 
RESOURCE_GROUP_NAME=tstate
STORAGE_ACCOUNT_NAME=tstate$RANDOM
CONTAINER_NAME=tstate

# Create resource group
az group create --name $RESOURCE_GROUP_NAME --location germanywestcentral

# Create storage account
az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob

# Get storage account key
ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv)

# Create blob container
az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY

echo "storage_account_name: $STORAGE_ACCOUNT_NAME"
echo "container_name: $CONTAINER_NAME"
echo "access_key: $ACCOUNT_KEY"

## 2.	Configuring Terraform to use the Storage account
# main.tf
# Azure Provider source and version being used
terraform {
  backend "azurerm" {
    resource_group_name   = "tstate"
    storage_account_name  = "tstate16782"
    container_name        = "tstate"
    key                   = "terraform.tfstate"
  }
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "=2.46.0"
    }
  }
}

# Configure the Microsoft Azure Provider
provider "azurerm" {
  features {}
  subscription_id = var.subscription_id
  client_id       = var.client_id
  client_secret   = var.client_secret
  tenant_id       = var.tenant_id
}

# Create a resource group
resource "azurerm_resource_group" "test-rg" {
  name     = "test-resources"
  location = "West Europe"
}

### Creating a virtual network in Azure
## 1.
#variables.tf 
variable "client_secret" {
    description = "Enter your CLient Secret. Please make sure you do not store the value of your client secret in the SCM repository"
}
variable "client_id" {
    description = "Your client Id."
}
variable "subscription_id" {
    description = "Your subscription id."
    default = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
variable "tenant_id" {
    description = "Your tenant id."
    default = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
variable "prefix" {
  description = "The prefix which should be used for all resources in this Chapter"
  default = "test"
}
variable "location" {
  description = "The Azure Region in which all resources in this Chapter should be created."
  default = "West Europe"
}
variable "dbpassword" {
  description = "Database Password."
}

##2.	Create virtual_network.tf and use the following code to create a VNET:

# virtual_network.tf
# Virtual network
resource "azurerm_virtual_network" "vnet" {
  name = "${var.prefix}-vnet"
  address_space = ["10.0.0.0/16"]
  location = var.location
  resource_group_name = azurerm_resource_group.test-rg.name
}

# Subnet
resource "azurerm_subnet" "subnet" {
  name = "${var.prefix}Subnet"
  resource_group_name =  azurerm_resource_group.test-rg.name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes = ["10.0.1.0/24"]
}

# Public ip
resource "azurerm_public_ip" "publicip" {
  name = "pip1"
  location = var.location
  resource_group_name = azurerm_resource_group.test-rg.name
  allocation_method = "Dynamic"
  sku = "Basic"
}

# Network interface
resource "azurerm_network_interface" "nic" {
  name = "${var.prefix}-nic"
  location = var.location
  resource_group_name = azurerm_resource_group.test-rg.name

  ip_configuration {
    name = "ipconfig1"
    subnet_id = azurerm_subnet.subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id = azurerm_public_ip.publicip.id
  }
}

### Creating network security groups in Azure
# virtual_network.tf
# Security Group
resource "azurerm_network_security_group" "frontendnsg" {
  name                = "${var.prefix}SecurityGroup"
  location            = var.location
  resource_group_name = azurerm_resource_group.test-rg.name

  tags = {
    environment = "Production"
  }
}

# Security rules
resource "azurerm_network_security_rule" "httprule" {
  name                       = "${var.prefix}http"
  priority                   = 100
  direction                  = "Inbound"
  access                     = "Allow"
  protocol                   = "Tcp"
  source_port_range          = "*"
  destination_port_range     = "8080"
  source_address_prefix      = "*"
  destination_address_prefix = "10.0.1.0/24"
  resource_group_name         = azurerm_resource_group.test-rg.name
  network_security_group_name = azurerm_network_security_group.frontendnsg.name
}

# Security rules
resource "azurerm_network_security_rule" "sshrule" {
  name                       = "${var.prefix}ssh"
  priority                   = 101
  direction                  = "Inbound"
  access                     = "Allow"
  protocol                   = "Tcp"
  source_port_range          = "*"
  destination_port_range     = "22"
  source_address_prefix      = "*"
  destination_address_prefix = "10.0.1.0/24"
  resource_group_name         = azurerm_resource_group.test-rg.name
  network_security_group_name = azurerm_network_security_group.frontendnsg.name
}

# Subnet â€“ Security Group association
resource "azurerm_subnet_network_security_group_association" "subnetsecuritygroup" {
  subnet_id                 = azurerm_subnet.subnet.id
  network_security_group_id = azurerm_network_security_group.frontendnsg.id
}

### Creating a virtual machine in Azure
##1.	Create the virtual_machine.tf file with the following code:
# virtual_machine.tf
resource "azurerm_virtual_machine" "vm" {
  # name = "${var.prefix}-vm"
  name                  = "${var.prefix}-vm"
  location              = var.location
  resource_group_name   = azurerm_resource_group.test-rg.name
  network_interface_ids = [azurerm_network_interface.nic.id]
  vm_size               = "Standard_DS1_v2"

  storage_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }
  storage_os_disk {
    name              = "${var.prefix}osdisk1"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }
  os_profile {
    computer_name  = "hostname"
    admin_username = "${var.prefix}admin"
    admin_password = "Password1234!"
  }
  os_profile_linux_config {
    disable_password_authentication = false
  }
  tags = {
    environment = "Production"
  }
}

### Creating a virtual machine instance with Packer AMI
## 2.	Create a file named packer-ami.json and paste the following packer configuration in this JSON file:

{    
  "variables": {
    "az_client_id": "",
    "az_client_secret": ""
  },
  "builders": [{
    "type": "azure-arm",
    "client_id": "{{user `az_client_id`}}",
    "client_secret": "{{user `az_client_secret`}}",
    "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "subscription_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "managed_image_resource_group_name": "ami-rg-store",
    "managed_image_storage_account_type": "Standard_LRS",
    "managed_image_name": "jenkins-ami-{{timestamp}}",
    "os_type": "Linux",
    "image_publisher": "Canonical",
    "image_offer": "0001-com-ubuntu-server-focal",
    "image_sku": "20_04-lts-gen2",
    "azure_tags": {
        "dept": "Production",
        "task": "VM Image deployment"
    },
    "location": "West Europe",
    "vm_size": "Standard_DS2_v2"
  }],
  "provisioners": [{
    "execute_command": "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'",
    "inline": [
      "apt update -y",
      "sudo apt install -y zip curl wget apt-transport-https openjdk-11-jre openjdk-11-jdk",
      "echo '----Install Jenkins ----'",
      "curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null",
      "echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null",
      "sudo apt-get update -y",
      "sudo apt-get install -y jenkins"
    ],
    "inline_shebang": "/bin/sh -x",
    "type": "shell"
  }]
}

## 5.	Create a Terraform virtual machine configuration to use this AMI
# virtual_machine.tf
resource "azurerm_virtual_machine" "vm" {
  name                  = "${var.prefix}-vm"
  location              = var.location
  resource_group_name   = azurerm_resource_group.test-rg.name
  network_interface_ids = [azurerm_network_interface.nic.id]
  vm_size               = "Standard_DS1_v2"
  storage_image_reference {
    id                = "/subscriptions/${var.subscription_id}/resourceGroups/ami-rg-store/providers/Microsoft.Compute/images/jenkins-ami-1624752554"
  }
  storage_os_disk {
    name              = "${var.prefix}osdisk"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }
  os_profile {
    computer_name  = "hostname"
    admin_username = "${var.prefix}admin"
    admin_password = "Password1234!"
  }
  os_profile_linux_config {
    disable_password_authentication = false
  }
  tags = {
    environment = "Production"
  }
}

### Configuring Azure Machine scale set
## 1.	Create the vitual_machine_scale_set.tf file and paste the following code in it:

# virtual_machine_scale_set.tf
resource "azurerm_linux_virtual_machine_scale_set" "vmss" {
  name                = "${var.prefix}-vmss"
  resource_group_name = azurerm_resource_group.test-rg.name
  location            = var.location
  sku                 = "Standard_DS2_v2"
  instances           = 3
  admin_username      = "adminuser"
  admin_password      = "p@ssword1234"
  source_image_id     = "/subscriptions/${var.subscription_id}/resourceGroups/ami-rg-store/providers/Microsoft.Compute/images/{ManagedImageName}"

  admin_ssh_key {
    username   = "adminuser"
    public_key = file("~/.ssh/id_rsa.pub")
  }
  network_interface {
    name    = "internalNI"
    primary = true

    ip_configuration {
      name      = "internal"
      primary   = true
      subnet_id = azurerm_subnet.subnet.id
    }
  }

  os_disk {
    storage_account_type = "Standard_LRS"
    caching              = "ReadWrite"
  }
}

# AutoScale configuration
resource "azurerm_monitor_autoscale_setting" "vmssautoscale" {
  name                = "autoscale-config"
  resource_group_name = azurerm_resource_group.test-rg.name
  location            = var.location
  target_resource_id  = azurerm_linux_virtual_machine_scale_set.vmss.id

  profile {
    name = "AutoScale"

    capacity {
      default = 3
      minimum = 1
      maximum = 5
    }

    rule {
      metric_trigger {
        metric_name        = "Percentage CPU"
        metric_resource_id = azurerm_linux_virtual_machine_scale_set.vmss.id
        time_grain         = "PT1M"
        statistic          = "Average"
        time_window        = "PT5M"
        time_aggregation   = "Average"
        operator           = "GreaterThan"
        threshold          = 75
      }

      scale_action {
        direction = "Increase"
        type      = "ChangeCount"
        value     = "1"
        cooldown  = "PT1M"
      }
    }

    rule {
      metric_trigger {
        metric_name        = "Percentage CPU"
        metric_resource_id = azurerm_linux_virtual_machine_scale_set.vmss.id
        time_grain         = "PT1M"
        statistic          = "Average"
        time_window        = "PT5M"
        time_aggregation   = "Average"
        operator           = "LessThan"
        threshold          = 25
      }

      scale_action {
        direction = "Decrease"
        type      = "ChangeCount"
        value     = "1"
        cooldown  = "PT1M"
      }
    }
  }
}

### Creating and deploying an App Service for Java web application
## 1.	Create all the variables in variables.tf:

# variables.tf
variable "client_secret" {
    description = "Enter your CLient Secret. Please make sure you do not store the value of your client secret in the SCM repository"
}
variable "client_id" {
    description = "Your client Id."
    default = "6071b99d-b9c2-4467-80c3-106114dc7413"
}
variable "subscription_id" {
    description = "Your subscription id."
    default = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
variable "tenant_id" {
    description = "Your tenant id."
    default = "dcec1208-4239-41aa-8a05-6956f67c6856"
}
variable "prefix" {
  description = "The prefix which should be used for all resources in this Chapter"
  default = "prod"
}
variable "location" {
  description = "The Azure Region in which all resources in this Chapter should be created."
  default = "West Europe"
}
variable "environment" {
  description = "The Azure Region in which all resources in this Chapter should be created."
  default = "Production"
}

variable "dbpassword" {
  description = "Enter a strong Database password with at-least one capitals, one small letters, one number and a special character. Example : P@ssw0rd in default"
default = "P@ssw0rd"
}

## 2. Create main.tf file
# main.tf
provider "azurerm" {
  features {}
  subscription_id = var.subscription_id
  client_id       = var.client_id
  client_secret   = var.client_secret
  tenant_id       = var.tenant_id
}

# Azure Provider source and version being used
terraform {
  backend "azurerm" {
    resource_group_name   = "tstate"
    storage_account_name  = "tstate16782"
    container_name        = "tstate"
    key                   = "terraform_app_service.tfstate"
  }
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "=2.46.0"
    }
  }
}

## 1. Create a new rg.tf file
# rg.tf
# Create a resource group north
resource "azurerm_resource_group" "north-prod-rg" {
  name     = "${var.prefix}-north-resources"
  location = "North Europe"
  
  tags = {
    Environment = var.environment
  }
}

# Create a resource group west
resource "azurerm_resource_group" "west-prod-rg" {
  name     = "${var.prefix}-west-resources"
  location = "West Europe"
  
  tags = {
    Environment = var.environment
  }
}

# Create a Resource Groups global
resource "azurerm_resource_group" "global-prod-rg" {
  name     = "${var.prefix}-global-rg"
  location = "Germany West Central"
  
  tags = {
    Environment = var.environment
  }
}

## 4.	Create a network.tf file with the following Terraform code to create networks, subnets, and public IPs:
# network.tf
# Virtual network North
resource "azurerm_virtual_network" "north-vnet" {
  name = "${var.prefix}-north-vnet"
  address_space = ["10.0.0.0/16"]
  location            = azurerm_resource_group.north-prod-rg.location
  resource_group_name = azurerm_resource_group.north-prod-rg.name
}

# Virtual network West
resource "azurerm_virtual_network" "west-vnet" {
  name = "${var.prefix}-west-vnet"
  address_space = ["10.0.0.0/16"]
  location            = azurerm_resource_group.west-prod-rg.location
  resource_group_name = azurerm_resource_group.west-prod-rg.name
}

# Subnet North
resource "azurerm_subnet" "north-subnet" {
  name = "${var.prefix}-north-subnet"
  resource_group_name = azurerm_resource_group.north-prod-rg.name
  virtual_network_name = azurerm_virtual_network.north-vnet.name
  address_prefixes = ["10.0.1.0/24"]
}

# Subnet West
resource "azurerm_subnet" "west-subnet" {
  name = "${var.prefix}-west-subnet"
  resource_group_name = azurerm_resource_group.west-prod-rg.name
  virtual_network_name = azurerm_virtual_network.west-vnet.name
  address_prefixes = ["10.0.1.0/24"]
}

# Public ip North
resource "azurerm_public_ip" "north-publicip" {
  name = "${var.prefix}-north-pip"
  location            = azurerm_resource_group.north-prod-rg.location
  resource_group_name = azurerm_resource_group.north-prod-rg.name
  allocation_method = "Dynamic"
}

# Public ip West
resource "azurerm_public_ip" "west-publicip" {
  name = "${var.prefix}-west-pip"
  location            = azurerm_resource_group.west-prod-rg.location
  resource_group_name = azurerm_resource_group.west-prod-rg.name
  allocation_method = "Dynamic"
}

### Managing Application Insights for Java web application
## Create a app_insight.tf file and paste the following code in it to create Application Insight:

# app_insight.tf
resource "azurerm_application_insights" "north-appinsights" {
    name                = "north-${var.prefix}-appinsights"
    location            = var.location
    resource_group_name = azurerm_resource_group.north-prod-rg.name
    application_type    = "java"
}

output "instrumentation_key_north" {
    value = azurerm_application_insights.north-appinsights.instrumentation_key
    sensitive = true
}

output "app_id_north" {
    value = azurerm_application_insights.north-appinsights.app_id
}
resource "azurerm_application_insights" "west-appinsights" {
    name                = "west-${var.prefix}-appinsights"
    location            = var.location
    resource_group_name = azurerm_resource_group.west-prod-rg.name
    application_type    = "java"
}

output "instrumentation_key_west" {
    value = azurerm_application_insights.west-appinsights.instrumentation_key
    sensitive = true
}

output "app_id_west" {
    value = azurerm_application_insights.west-appinsights.app_id
}

### Creating a database for Java web application

# mysql_db.tf
resource "azurerm_mysql_server" "mysqlserver" {
  name                = "${var.prefix}-app-mysqlserver"
  location            = var.location
  resource_group_name = azurerm_resource_group.global-prod-rg.name

  administrator_login          = "mysqladmin"
  administrator_login_password = var.dbpassword

  sku_name   = "GP_Gen5_2"
  storage_mb = 5120
  version    = "5.7"

  auto_grow_enabled                 = true
  backup_retention_days             = 7
  ssl_enforcement_enabled           = true
  ssl_minimal_tls_version_enforced  = "TLS1_2"
  tags = {
    Environment = var.environment
  }
}

resource "azurerm_mysql_database" "mysqldb" {
  name                = "${var.prefix}-app-db"
  resource_group_name = azurerm_resource_group.global-prod-rg.name
  server_name         = azurerm_mysql_server.mysqlserver.name
  charset             = "utf8"
  collation           = "utf8_unicode_ci"
}

### Creating App Service
## 1.	Create a file named app_service.tf for the creation of App service plans for North and West Europe:
# app_service.tf
# App Servie plan North
resource "azurerm_app_service_plan" "north-asp" {
  name                = "${var.prefix}-north-asp"
  location            = azurerm_resource_group.north-prod-rg.location
  resource_group_name = azurerm_resource_group.north-prod-rg.name

  sku {
    tier = "Standard"
    size = "S1"
  }

  tags = {
    Environment = var.environment
  }
}

# App Servie plan West
resource "azurerm_app_service_plan" "west-asp" {
  name                = "${var.prefix}-west-asp"
  location            = azurerm_resource_group.west-prod-rg.location
  resource_group_name = azurerm_resource_group.west-prod-rg.name

  sku {
    tier = "Standard"
    size = "S1"
  }
  
  tags = {
    Environment = var.environment
  }
}

## 2.	Now, we can create App Services (in North and West Europe) 
# app_service.tf
# App Service North
resource "azurerm_app_service" "north-appservice" {
  name                = "${var.prefix}-north-java-appservice"
  location            = azurerm_resource_group.north-prod-rg.location
  resource_group_name = azurerm_resource_group.north-prod-rg.name
  app_service_plan_id = azurerm_app_service_plan.north-asp.id

  site_config {
    java_version           = "1.8"
    java_container         = "TOMCAT"
    java_container_version = "9.0"
  }

  tags = {
    Environment = var.environment
  }

  connection_string {
    name  = "Database"
    type  = "MySQL"
    value = "Server=${var.prefix}-app-mysqlserver;Port=3306;Database=${var.prefix}-app-db;User=mysqladmin;SSLMode=1;UseSystemTrustStore=0;Password=${var.dbpassword}"
  }

  app_settings = {
    APPINSIGHTS_INSTRUMENTATIONKEY = azurerm_application_insights.north-appinsights.instrumentation_key
    APPLICATIONINSIGHTS_CONNECTION_STRING = azurerm_application_insights.north-appinsights.connection_string
  }
}

# App Service West
resource "azurerm_app_service" "west-appservice" {
  name                = "${var.prefix}-west-java-appservice"
  location            = azurerm_resource_group.west-prod-rg.location
  resource_group_name = azurerm_resource_group.west-prod-rg.name
  app_service_plan_id = azurerm_app_service_plan.west-asp.id

  site_config {
    java_version           = "1.8"
    java_container         = "TOMCAT"
    java_container_version = "9.0"
  }

  tags = {
    Environment = var.environment
  }
  
  connection_string {
    name  = "Database"
    type  = "MySQL"
    value = "Server=${var.prefix}-app-mysqlserver;Port=3306;Database=${var.prefix}-app-db;User=mysqladmin;SSLMode=1;UseSystemTrustStore=0;Password=${var.dbpassword}"
  }

  app_settings = {
    APPINSIGHTS_INSTRUMENTATIONKEY = azurerm_application_insights.west-appinsights.instrumentation_key
    APPLICATIONINSIGHTS_CONNECTION_STRING = azurerm_application_insights.west-appinsights.connection_string
  }
}

### Creating Application Gateway for Java web application
# app_gateway.tf
# App Gateway North
resource "azurerm_application_gateway" "north-gateway" {
  name                = "${var.prefix}-north-appgateway"
  location            = azurerm_resource_group.north-prod-rg.location
  resource_group_name = azurerm_resource_group.north-prod-rg.name

  sku {
    name     = "WAF_Medium"
    tier     = "WAF"
    capacity = 2
  }

  waf_configuration {
    enabled          = "true"
    firewall_mode    = "Detection"
    rule_set_type    = "OWASP"
    rule_set_version = "3.0"
  }

  gateway_ip_configuration {
    name      = "${var.prefix}-north-gateway-ip-configuration"
    subnet_id = azurerm_subnet.north-subnet.id
  }

  frontend_port {
    name = "${azurerm_virtual_network.north-vnet.name}-feport"
    port = 80
  }

  frontend_ip_configuration {
    name                 = "${azurerm_virtual_network.north-vnet.name}-feip"
    public_ip_address_id = azurerm_public_ip.north-publicip.id
  }

  backend_address_pool {
    name = "${azurerm_virtual_network.north-vnet.name}-beap"
    fqdns = ["${azurerm_app_service.north-appservice.name}.azurewebsites.net"]
  }

  probe {
    name                = "north-probe"
    protocol            = "http"
    path                = "/"
    host                = "${azurerm_app_service.north-appservice.name}.azurewebsites.net"
    interval            = "30"
    timeout             = "30"
    unhealthy_threshold = "3"
  }

  backend_http_settings {
    name                  = "${azurerm_virtual_network.north-vnet.name}-be-htst"
    cookie_based_affinity = "Disabled"
    port                  = 80
    protocol              = "Http"
    request_timeout       = 60
    probe_name            = "north-probe"
    pick_host_name_from_backend_address = true
  }

  http_listener {
    name                           =  "${azurerm_virtual_network.north-vnet.name}-httplstn"
    frontend_ip_configuration_name =  "${azurerm_virtual_network.north-vnet.name}-feip"
    frontend_port_name             =  "${azurerm_virtual_network.north-vnet.name}-feport"
    protocol                       = "Http"
  }

  request_routing_rule {
    name                       =  "${azurerm_virtual_network.north-vnet.name}-rqrt"
    rule_type                  = "Basic"
    http_listener_name         =  "${azurerm_virtual_network.north-vnet.name}-httplstn"
    backend_address_pool_name  =  "${azurerm_virtual_network.north-vnet.name}-beap"
    backend_http_settings_name =  "${azurerm_virtual_network.north-vnet.name}-be-htst"
  }

  
  tags = {
    Environment = var.environment
  }
}

# App Gateway West
resource "azurerm_application_gateway" "west-gateway" {
  name                = "${var.prefix}-west-appgateway"
  location            = azurerm_resource_group.west-prod-rg.location
  resource_group_name = azurerm_resource_group.west-prod-rg.name

  sku {
    name     = "WAF_Medium"
    tier     = "WAF"
    capacity = 2
  }

  waf_configuration {
    enabled          = "true"
    firewall_mode    = "Detection"
    rule_set_type    = "OWASP"
    rule_set_version = "3.0"
  }

  gateway_ip_configuration {
    name      = "${var.prefix}-west-gateway-ip-configuration"
    subnet_id = azurerm_subnet.west-subnet.id
  }

  frontend_port {
    name = "${azurerm_virtual_network.west-vnet.name}-feport"
    port = 80
  }

  frontend_ip_configuration {
    name                 = "${azurerm_virtual_network.west-vnet.name}-feip"
    public_ip_address_id = azurerm_public_ip.west-publicip.id
  }

  backend_address_pool {
    name = "${azurerm_virtual_network.west-vnet.name}-beap"
    fqdns = ["${azurerm_app_service.west-appservice.name}.azurewebsites.net"]
  }

  probe {
    name                = "west-probe"
    protocol            = "http"
    path                = "/"
    host                = "${azurerm_app_service.west-appservice.name}.azurewebsites.net"
    interval            = "30"
    timeout             = "30"
    unhealthy_threshold = "3"
  }

  backend_http_settings {
    name                                = "${azurerm_virtual_network.west-vnet.name}-be-htst"
    cookie_based_affinity               = "Disabled"
    port                                = 80
    protocol                            = "Http"
    request_timeout                     = 60
    probe_name                          = "west-probe"
    pick_host_name_from_backend_address = true
  }

  http_listener {
    name                           =  "${azurerm_virtual_network.west-vnet.name}-httplstn"
    frontend_ip_configuration_name =  "${azurerm_virtual_network.west-vnet.name}-feip"
    frontend_port_name             =  "${azurerm_virtual_network.west-vnet.name}-feport"
    protocol                       = "Http"
  }

  request_routing_rule {
    name                       =  "${azurerm_virtual_network.west-vnet.name}-rqrt"
    rule_type                  = "Basic"
    http_listener_name         =  "${azurerm_virtual_network.west-vnet.name}-httplstn"
    backend_address_pool_name  =  "${azurerm_virtual_network.west-vnet.name}-beap"
    backend_http_settings_name =  "${azurerm_virtual_network.west-vnet.name}-be-htst"
  }

  
  tags = {
    Environment = var.environment
  }
}

### Creating Traffic Manager for multi-location web app
##create a Traffic Manager in a new file called traffic_manager.tf:
# traffic_manager.tf
# Traffic manager for Java Web App
resource "azurerm_traffic_manager_profile" "traffic-manager" {
  name                   = "${var.prefix}-java-webapp-tm"
  resource_group_name    = azurerm_resource_group.global-prod-rg.name
  traffic_routing_method = "Performance"

  dns_config {
    relative_name = "${var.prefix}-java-webapp"
    ttl           = 300
  }

  monitor_config {
    protocol                     = "http"
    port                         = 80
    path                         = "/"
    interval_in_seconds          = 30
    timeout_in_seconds           = 9
    tolerated_number_of_failures = 3
  }

  tags = {
    Environment = var.environment
  }
}

# Endpoint North
resource "azurerm_traffic_manager_endpoint" "north-tm-endpoint" {
  name                = "${var.prefix}-north-global-tm"
  resource_group_name    = azurerm_resource_group.global-prod-rg.name
  profile_name        = azurerm_traffic_manager_profile.traffic-manager.name
  target              = azurerm_public_ip.north-publicip.fqdn
  endpoint_location = azurerm_public_ip.north-publicip.location
  type                = "externalEndpoints"
}

# Endpoint West
resource "azurerm_traffic_manager_endpoint" "west-tm-endpoint" {
  name                = "${var.prefix}-west-global-tm"
  resource_group_name    = azurerm_resource_group.global-prod-rg.name
  profile_name        = azurerm_traffic_manager_profile.traffic-manager.name
  target              = azurerm_public_ip.west-publicip.fqdn
  endpoint_location = azurerm_public_ip.west-publicip.location
  type                = "externalEndpoints"
}

### Deploying a Java web application in App Services
## github workflow configuration YML

# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy WAR app to Azure Web App - prod-north-java-appservice

on:
push:
branches:
- master
workflow_dispatch:

jobs:
build:
runs-on: windows-latest

steps:
- uses: actions/checkout@v2

- name: Set up Java version
uses: actions/setup-java@v1
with:
java-version: '1.7'

- name: Build with Maven
run: mvn clean install

- name: Upload artifact for deployment job
uses: actions/upload-artifact@v2
with:
name: java-app
path: '${{ github.workspace }}/target/*.war'

deploy:
runs-on: windows-latest
needs: build
environment:
name: 'production'
url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

steps:
- name: Download artifact from build job
uses: actions/download-artifact@v2
with:
name: java-app

- name: Deploy to Azure Web App
id: deploy-to-webapp
uses: azure/webapps-deploy@v2
with:
app-name: 'prod-north-java-appservice'
slot-name: 'production'
publish-profile: ${{ secrets.AzureAppService_PublishProfile_xxxxxxxxxxxxxxxxxxxxxxxxxxxx }}
package: '*.war'

### Managing Azure Spring Cloud
## 1. new file var.tf
# var.tf
variable "client_secret" {
    description = "Enter your CLient Secret. Please make sure you do not store the value of your client secret in the SCM repository"
}
variable "client_id" {
    description = "Your client Id."
    default = " xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx "
}
variable "subscription_id" {
    description = "Your subscription id."
    default = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
variable "tenant_id" {
    description = "Your tenant id."
    default = " xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx "
}
variable "prefix" {
  description = "The prefix which should be used for all resources in this Chapter"
  default = "prod"
}

variable "environment" {
  description = "The Azure Region in which all resources in this Chapter should be created."
  default = "Production"
}

variable "resource_group_name" {
    type        = string 
    description = "Core Infrastructure Resource Group"
    default     = "sc-rg"
}
variable "location" {
    type = string
    default = "East US"
} 

## 3.
# rg.tf
# Create a Spring Cloud Resource Groups global
resource "azurerm_resource_group" "sc-prod-rg" {
  name     = var.resource_group_name
  location = var.location
  
  tags = {
    Environment = var.environment
  }
}

## 4.
# spring_cloud.tf
# Application insights for spring cloud service
resource "azurerm_application_insights" "sc_app_insights" {
  name                = "sc_insights"
  location            = var.location
  resource_group_name = azurerm_resource_group.sc-prod-rg.name
  application_type    = "web"
}

resource "azurerm_spring_cloud_service" "sc" {
  name                = "sc-service"
  resource_group_name = azurerm_resource_group.sc-prod-rg.name
  location            = var.location
  
  timeouts {
    create = "60m"
    delete = "2h"  
  }

  trace {
    instrumentation_key = azurerm_application_insights.sc_app_insights.instrumentation_key
  }
}

## 5.
# spring_cloud.tf
# Spring Cloud App
resource "azurerm_spring_cloud_app" "sc-app" {
  name                = "hellospring"
  resource_group_name = azurerm_resource_group.sc-prod-rg.name
  service_name        = azurerm_spring_cloud_service.sc.name
}
